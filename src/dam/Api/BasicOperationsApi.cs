/*
 * Dam Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using dam.Client;
using dam.Client.Auth;
using dam.Model;

namespace dam.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasicOperationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Batch Upload Assets
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamBatchUploadAssetsResponse</returns>
        DamBatchUploadAssetsResponse BatchUploadAssets(DamBatchUploadAssetsRequest body, int operationIndex = 0);

        /// <summary>
        /// Batch Upload Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamBatchUploadAssetsResponse</returns>
        ApiResponse<DamBatchUploadAssetsResponse> BatchUploadAssetsWithHttpInfo(DamBatchUploadAssetsRequest body, int operationIndex = 0);
        /// <summary>
        /// Batch Upload Assets
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamBatchUploadAssetsResponse</returns>
        DamBatchUploadAssetsResponse BatchUploadAssets_0(DamBatchUploadAssetsRequest body, int operationIndex = 0);

        /// <summary>
        /// Batch Upload Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamBatchUploadAssetsResponse</returns>
        ApiResponse<DamBatchUploadAssetsResponse> BatchUploadAssets_0WithHttpInfo(DamBatchUploadAssetsRequest body, int operationIndex = 0);
        /// <summary>
        /// Create Asset
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamAsset</returns>
        DamAsset CreateAsset(DamCreateAssetRequest body, int operationIndex = 0);

        /// <summary>
        /// Create Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamAsset</returns>
        ApiResponse<DamAsset> CreateAssetWithHttpInfo(DamCreateAssetRequest body, int operationIndex = 0);
        /// <summary>
        /// Create Asset
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamAsset</returns>
        DamAsset CreateAsset_0(DamCreateAssetRequest body, int operationIndex = 0);

        /// <summary>
        /// Create Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamAsset</returns>
        ApiResponse<DamAsset> CreateAsset_0WithHttpInfo(DamCreateAssetRequest body, int operationIndex = 0);
        /// <summary>
        /// Get Asset By Code
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamAsset</returns>
        DamAsset GetAssetByCode(DamGetAssetByCodeRequest body, int operationIndex = 0);

        /// <summary>
        /// Get Asset By Code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamAsset</returns>
        ApiResponse<DamAsset> GetAssetByCodeWithHttpInfo(DamGetAssetByCodeRequest body, int operationIndex = 0);
        /// <summary>
        /// Get Asset By Code
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamAsset</returns>
        DamAsset GetAssetByCode_0(DamGetAssetByCodeRequest body, int operationIndex = 0);

        /// <summary>
        /// Get Asset By Code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamAsset</returns>
        ApiResponse<DamAsset> GetAssetByCode_0WithHttpInfo(DamGetAssetByCodeRequest body, int operationIndex = 0);
        /// <summary>
        /// List Assets
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamListAssetsResponse</returns>
        DamListAssetsResponse ListAssets(DamListAssetsRequest body, int operationIndex = 0);

        /// <summary>
        /// List Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamListAssetsResponse</returns>
        ApiResponse<DamListAssetsResponse> ListAssetsWithHttpInfo(DamListAssetsRequest body, int operationIndex = 0);
        /// <summary>
        /// List Assets By Codes
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamListAssetsByCodesResponse</returns>
        DamListAssetsByCodesResponse ListAssetsByCodes(DamListAssetsByCodesRequest body, int operationIndex = 0);

        /// <summary>
        /// List Assets By Codes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamListAssetsByCodesResponse</returns>
        ApiResponse<DamListAssetsByCodesResponse> ListAssetsByCodesWithHttpInfo(DamListAssetsByCodesRequest body, int operationIndex = 0);
        /// <summary>
        /// List Assets By Codes
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamListAssetsByCodesResponse</returns>
        DamListAssetsByCodesResponse ListAssetsByCodes_0(DamListAssetsByCodesRequest body, int operationIndex = 0);

        /// <summary>
        /// List Assets By Codes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamListAssetsByCodesResponse</returns>
        ApiResponse<DamListAssetsByCodesResponse> ListAssetsByCodes_0WithHttpInfo(DamListAssetsByCodesRequest body, int operationIndex = 0);
        /// <summary>
        /// List Assets By Ids
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamListAssetsByIdsResponse</returns>
        DamListAssetsByIdsResponse ListAssetsByIds(DamListAssetsByIdsRequest body, int operationIndex = 0);

        /// <summary>
        /// List Assets By Ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamListAssetsByIdsResponse</returns>
        ApiResponse<DamListAssetsByIdsResponse> ListAssetsByIdsWithHttpInfo(DamListAssetsByIdsRequest body, int operationIndex = 0);
        /// <summary>
        /// List Assets By Ids
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamListAssetsByIdsResponse</returns>
        DamListAssetsByIdsResponse ListAssetsByIds_0(DamListAssetsByIdsRequest body, int operationIndex = 0);

        /// <summary>
        /// List Assets By Ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamListAssetsByIdsResponse</returns>
        ApiResponse<DamListAssetsByIdsResponse> ListAssetsByIds_0WithHttpInfo(DamListAssetsByIdsRequest body, int operationIndex = 0);
        /// <summary>
        /// List Assets
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamListAssetsResponse</returns>
        DamListAssetsResponse ListAssets_0(DamListAssetsRequest body, int operationIndex = 0);

        /// <summary>
        /// List Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamListAssetsResponse</returns>
        ApiResponse<DamListAssetsResponse> ListAssets_0WithHttpInfo(DamListAssetsRequest body, int operationIndex = 0);
        /// <summary>
        /// Update Asset
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamAsset</returns>
        DamAsset UpdateAsset(DamUpdateAssetRequest body, int operationIndex = 0);

        /// <summary>
        /// Update Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamAsset</returns>
        ApiResponse<DamAsset> UpdateAssetWithHttpInfo(DamUpdateAssetRequest body, int operationIndex = 0);
        /// <summary>
        /// Update Asset
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamAsset</returns>
        DamAsset UpdateAsset_0(DamUpdateAssetRequest body, int operationIndex = 0);

        /// <summary>
        /// Update Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamAsset</returns>
        ApiResponse<DamAsset> UpdateAsset_0WithHttpInfo(DamUpdateAssetRequest body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasicOperationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Batch Upload Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamBatchUploadAssetsResponse</returns>
        System.Threading.Tasks.Task<DamBatchUploadAssetsResponse> BatchUploadAssetsAsync(DamBatchUploadAssetsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Batch Upload Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamBatchUploadAssetsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DamBatchUploadAssetsResponse>> BatchUploadAssetsWithHttpInfoAsync(DamBatchUploadAssetsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Batch Upload Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamBatchUploadAssetsResponse</returns>
        System.Threading.Tasks.Task<DamBatchUploadAssetsResponse> BatchUploadAssets_0Async(DamBatchUploadAssetsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Batch Upload Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamBatchUploadAssetsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DamBatchUploadAssetsResponse>> BatchUploadAssets_0WithHttpInfoAsync(DamBatchUploadAssetsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamAsset</returns>
        System.Threading.Tasks.Task<DamAsset> CreateAssetAsync(DamCreateAssetRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<DamAsset>> CreateAssetWithHttpInfoAsync(DamCreateAssetRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamAsset</returns>
        System.Threading.Tasks.Task<DamAsset> CreateAsset_0Async(DamCreateAssetRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<DamAsset>> CreateAsset_0WithHttpInfoAsync(DamCreateAssetRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Asset By Code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamAsset</returns>
        System.Threading.Tasks.Task<DamAsset> GetAssetByCodeAsync(DamGetAssetByCodeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Asset By Code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<DamAsset>> GetAssetByCodeWithHttpInfoAsync(DamGetAssetByCodeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Asset By Code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamAsset</returns>
        System.Threading.Tasks.Task<DamAsset> GetAssetByCode_0Async(DamGetAssetByCodeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Asset By Code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<DamAsset>> GetAssetByCode_0WithHttpInfoAsync(DamGetAssetByCodeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamListAssetsResponse</returns>
        System.Threading.Tasks.Task<DamListAssetsResponse> ListAssetsAsync(DamListAssetsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamListAssetsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DamListAssetsResponse>> ListAssetsWithHttpInfoAsync(DamListAssetsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Assets By Codes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamListAssetsByCodesResponse</returns>
        System.Threading.Tasks.Task<DamListAssetsByCodesResponse> ListAssetsByCodesAsync(DamListAssetsByCodesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Assets By Codes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamListAssetsByCodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DamListAssetsByCodesResponse>> ListAssetsByCodesWithHttpInfoAsync(DamListAssetsByCodesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Assets By Codes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamListAssetsByCodesResponse</returns>
        System.Threading.Tasks.Task<DamListAssetsByCodesResponse> ListAssetsByCodes_0Async(DamListAssetsByCodesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Assets By Codes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamListAssetsByCodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DamListAssetsByCodesResponse>> ListAssetsByCodes_0WithHttpInfoAsync(DamListAssetsByCodesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Assets By Ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamListAssetsByIdsResponse</returns>
        System.Threading.Tasks.Task<DamListAssetsByIdsResponse> ListAssetsByIdsAsync(DamListAssetsByIdsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Assets By Ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamListAssetsByIdsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DamListAssetsByIdsResponse>> ListAssetsByIdsWithHttpInfoAsync(DamListAssetsByIdsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Assets By Ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamListAssetsByIdsResponse</returns>
        System.Threading.Tasks.Task<DamListAssetsByIdsResponse> ListAssetsByIds_0Async(DamListAssetsByIdsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Assets By Ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamListAssetsByIdsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DamListAssetsByIdsResponse>> ListAssetsByIds_0WithHttpInfoAsync(DamListAssetsByIdsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamListAssetsResponse</returns>
        System.Threading.Tasks.Task<DamListAssetsResponse> ListAssets_0Async(DamListAssetsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamListAssetsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DamListAssetsResponse>> ListAssets_0WithHttpInfoAsync(DamListAssetsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamAsset</returns>
        System.Threading.Tasks.Task<DamAsset> UpdateAssetAsync(DamUpdateAssetRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<DamAsset>> UpdateAssetWithHttpInfoAsync(DamUpdateAssetRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamAsset</returns>
        System.Threading.Tasks.Task<DamAsset> UpdateAsset_0Async(DamUpdateAssetRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<DamAsset>> UpdateAsset_0WithHttpInfoAsync(DamUpdateAssetRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasicOperationsApi : IBasicOperationsApiSync, IBasicOperationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BasicOperationsApi : IBasicOperationsApi
    {
        private dam.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BasicOperationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BasicOperationsApi(string basePath)
        {
            this.Configuration = dam.Client.Configuration.MergeConfigurations(
                dam.Client.GlobalConfiguration.Instance,
                new dam.Client.Configuration { BasePath = basePath }
            );
            this.Client = new dam.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new dam.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = dam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicOperationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BasicOperationsApi(dam.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = dam.Client.Configuration.MergeConfigurations(
                dam.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new dam.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new dam.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = dam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicOperationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BasicOperationsApi(dam.Client.ISynchronousClient client, dam.Client.IAsynchronousClient asyncClient, dam.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = dam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public dam.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public dam.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public dam.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public dam.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Batch Upload Assets 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamBatchUploadAssetsResponse</returns>
        public DamBatchUploadAssetsResponse BatchUploadAssets(DamBatchUploadAssetsRequest body, int operationIndex = 0)
        {
            dam.Client.ApiResponse<DamBatchUploadAssetsResponse> localVarResponse = BatchUploadAssetsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch Upload Assets 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamBatchUploadAssetsResponse</returns>
        public dam.Client.ApiResponse<DamBatchUploadAssetsResponse> BatchUploadAssetsWithHttpInfo(DamBatchUploadAssetsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->BatchUploadAssets");
            }

            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.BatchUploadAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DamBatchUploadAssetsResponse>("/dam.Dam/BatchUploadAssets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUploadAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch Upload Assets 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamBatchUploadAssetsResponse</returns>
        public async System.Threading.Tasks.Task<DamBatchUploadAssetsResponse> BatchUploadAssetsAsync(DamBatchUploadAssetsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            dam.Client.ApiResponse<DamBatchUploadAssetsResponse> localVarResponse = await BatchUploadAssetsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch Upload Assets 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamBatchUploadAssetsResponse)</returns>
        public async System.Threading.Tasks.Task<dam.Client.ApiResponse<DamBatchUploadAssetsResponse>> BatchUploadAssetsWithHttpInfoAsync(DamBatchUploadAssetsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->BatchUploadAssets");
            }


            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.BatchUploadAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DamBatchUploadAssetsResponse>("/dam.Dam/BatchUploadAssets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUploadAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch Upload Assets 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamBatchUploadAssetsResponse</returns>
        public DamBatchUploadAssetsResponse BatchUploadAssets_0(DamBatchUploadAssetsRequest body, int operationIndex = 0)
        {
            dam.Client.ApiResponse<DamBatchUploadAssetsResponse> localVarResponse = BatchUploadAssets_0WithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch Upload Assets 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamBatchUploadAssetsResponse</returns>
        public dam.Client.ApiResponse<DamBatchUploadAssetsResponse> BatchUploadAssets_0WithHttpInfo(DamBatchUploadAssetsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->BatchUploadAssets_0");
            }

            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.BatchUploadAssets_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DamBatchUploadAssetsResponse>("/dam/batch_upload_assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUploadAssets_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch Upload Assets 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamBatchUploadAssetsResponse</returns>
        public async System.Threading.Tasks.Task<DamBatchUploadAssetsResponse> BatchUploadAssets_0Async(DamBatchUploadAssetsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            dam.Client.ApiResponse<DamBatchUploadAssetsResponse> localVarResponse = await BatchUploadAssets_0WithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch Upload Assets 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamBatchUploadAssetsResponse)</returns>
        public async System.Threading.Tasks.Task<dam.Client.ApiResponse<DamBatchUploadAssetsResponse>> BatchUploadAssets_0WithHttpInfoAsync(DamBatchUploadAssetsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->BatchUploadAssets_0");
            }


            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.BatchUploadAssets_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DamBatchUploadAssetsResponse>("/dam/batch_upload_assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUploadAssets_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Asset 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamAsset</returns>
        public DamAsset CreateAsset(DamCreateAssetRequest body, int operationIndex = 0)
        {
            dam.Client.ApiResponse<DamAsset> localVarResponse = CreateAssetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Asset 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamAsset</returns>
        public dam.Client.ApiResponse<DamAsset> CreateAssetWithHttpInfo(DamCreateAssetRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->CreateAsset");
            }

            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.CreateAsset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DamAsset>("/dam.Dam/CreateAsset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Asset 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamAsset</returns>
        public async System.Threading.Tasks.Task<DamAsset> CreateAssetAsync(DamCreateAssetRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            dam.Client.ApiResponse<DamAsset> localVarResponse = await CreateAssetWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Asset 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamAsset)</returns>
        public async System.Threading.Tasks.Task<dam.Client.ApiResponse<DamAsset>> CreateAssetWithHttpInfoAsync(DamCreateAssetRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->CreateAsset");
            }


            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.CreateAsset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DamAsset>("/dam.Dam/CreateAsset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Asset 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamAsset</returns>
        public DamAsset CreateAsset_0(DamCreateAssetRequest body, int operationIndex = 0)
        {
            dam.Client.ApiResponse<DamAsset> localVarResponse = CreateAsset_0WithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Asset 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamAsset</returns>
        public dam.Client.ApiResponse<DamAsset> CreateAsset_0WithHttpInfo(DamCreateAssetRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->CreateAsset_0");
            }

            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.CreateAsset_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DamAsset>("/dam/create_asset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAsset_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Asset 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamAsset</returns>
        public async System.Threading.Tasks.Task<DamAsset> CreateAsset_0Async(DamCreateAssetRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            dam.Client.ApiResponse<DamAsset> localVarResponse = await CreateAsset_0WithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Asset 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamAsset)</returns>
        public async System.Threading.Tasks.Task<dam.Client.ApiResponse<DamAsset>> CreateAsset_0WithHttpInfoAsync(DamCreateAssetRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->CreateAsset_0");
            }


            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.CreateAsset_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DamAsset>("/dam/create_asset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAsset_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset By Code 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamAsset</returns>
        public DamAsset GetAssetByCode(DamGetAssetByCodeRequest body, int operationIndex = 0)
        {
            dam.Client.ApiResponse<DamAsset> localVarResponse = GetAssetByCodeWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset By Code 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamAsset</returns>
        public dam.Client.ApiResponse<DamAsset> GetAssetByCodeWithHttpInfo(DamGetAssetByCodeRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->GetAssetByCode");
            }

            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.GetAssetByCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DamAsset>("/dam.Dam/GetAssetByCode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetByCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset By Code 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamAsset</returns>
        public async System.Threading.Tasks.Task<DamAsset> GetAssetByCodeAsync(DamGetAssetByCodeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            dam.Client.ApiResponse<DamAsset> localVarResponse = await GetAssetByCodeWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset By Code 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamAsset)</returns>
        public async System.Threading.Tasks.Task<dam.Client.ApiResponse<DamAsset>> GetAssetByCodeWithHttpInfoAsync(DamGetAssetByCodeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->GetAssetByCode");
            }


            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.GetAssetByCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DamAsset>("/dam.Dam/GetAssetByCode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetByCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset By Code 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamAsset</returns>
        public DamAsset GetAssetByCode_0(DamGetAssetByCodeRequest body, int operationIndex = 0)
        {
            dam.Client.ApiResponse<DamAsset> localVarResponse = GetAssetByCode_0WithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset By Code 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamAsset</returns>
        public dam.Client.ApiResponse<DamAsset> GetAssetByCode_0WithHttpInfo(DamGetAssetByCodeRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->GetAssetByCode_0");
            }

            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.GetAssetByCode_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DamAsset>("/dam/get_asset_by_code", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetByCode_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset By Code 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamAsset</returns>
        public async System.Threading.Tasks.Task<DamAsset> GetAssetByCode_0Async(DamGetAssetByCodeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            dam.Client.ApiResponse<DamAsset> localVarResponse = await GetAssetByCode_0WithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset By Code 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamAsset)</returns>
        public async System.Threading.Tasks.Task<dam.Client.ApiResponse<DamAsset>> GetAssetByCode_0WithHttpInfoAsync(DamGetAssetByCodeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->GetAssetByCode_0");
            }


            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.GetAssetByCode_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DamAsset>("/dam/get_asset_by_code", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetByCode_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Assets 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamListAssetsResponse</returns>
        public DamListAssetsResponse ListAssets(DamListAssetsRequest body, int operationIndex = 0)
        {
            dam.Client.ApiResponse<DamListAssetsResponse> localVarResponse = ListAssetsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Assets 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamListAssetsResponse</returns>
        public dam.Client.ApiResponse<DamListAssetsResponse> ListAssetsWithHttpInfo(DamListAssetsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->ListAssets");
            }

            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.ListAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DamListAssetsResponse>("/dam.Dam/ListAssets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Assets 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamListAssetsResponse</returns>
        public async System.Threading.Tasks.Task<DamListAssetsResponse> ListAssetsAsync(DamListAssetsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            dam.Client.ApiResponse<DamListAssetsResponse> localVarResponse = await ListAssetsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Assets 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamListAssetsResponse)</returns>
        public async System.Threading.Tasks.Task<dam.Client.ApiResponse<DamListAssetsResponse>> ListAssetsWithHttpInfoAsync(DamListAssetsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->ListAssets");
            }


            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.ListAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DamListAssetsResponse>("/dam.Dam/ListAssets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Assets By Codes 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamListAssetsByCodesResponse</returns>
        public DamListAssetsByCodesResponse ListAssetsByCodes(DamListAssetsByCodesRequest body, int operationIndex = 0)
        {
            dam.Client.ApiResponse<DamListAssetsByCodesResponse> localVarResponse = ListAssetsByCodesWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Assets By Codes 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamListAssetsByCodesResponse</returns>
        public dam.Client.ApiResponse<DamListAssetsByCodesResponse> ListAssetsByCodesWithHttpInfo(DamListAssetsByCodesRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->ListAssetsByCodes");
            }

            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.ListAssetsByCodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DamListAssetsByCodesResponse>("/dam.Dam/ListAssetsByCodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAssetsByCodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Assets By Codes 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamListAssetsByCodesResponse</returns>
        public async System.Threading.Tasks.Task<DamListAssetsByCodesResponse> ListAssetsByCodesAsync(DamListAssetsByCodesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            dam.Client.ApiResponse<DamListAssetsByCodesResponse> localVarResponse = await ListAssetsByCodesWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Assets By Codes 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamListAssetsByCodesResponse)</returns>
        public async System.Threading.Tasks.Task<dam.Client.ApiResponse<DamListAssetsByCodesResponse>> ListAssetsByCodesWithHttpInfoAsync(DamListAssetsByCodesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->ListAssetsByCodes");
            }


            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.ListAssetsByCodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DamListAssetsByCodesResponse>("/dam.Dam/ListAssetsByCodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAssetsByCodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Assets By Codes 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamListAssetsByCodesResponse</returns>
        public DamListAssetsByCodesResponse ListAssetsByCodes_0(DamListAssetsByCodesRequest body, int operationIndex = 0)
        {
            dam.Client.ApiResponse<DamListAssetsByCodesResponse> localVarResponse = ListAssetsByCodes_0WithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Assets By Codes 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamListAssetsByCodesResponse</returns>
        public dam.Client.ApiResponse<DamListAssetsByCodesResponse> ListAssetsByCodes_0WithHttpInfo(DamListAssetsByCodesRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->ListAssetsByCodes_0");
            }

            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.ListAssetsByCodes_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DamListAssetsByCodesResponse>("/dam/list_assets_by_codes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAssetsByCodes_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Assets By Codes 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamListAssetsByCodesResponse</returns>
        public async System.Threading.Tasks.Task<DamListAssetsByCodesResponse> ListAssetsByCodes_0Async(DamListAssetsByCodesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            dam.Client.ApiResponse<DamListAssetsByCodesResponse> localVarResponse = await ListAssetsByCodes_0WithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Assets By Codes 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamListAssetsByCodesResponse)</returns>
        public async System.Threading.Tasks.Task<dam.Client.ApiResponse<DamListAssetsByCodesResponse>> ListAssetsByCodes_0WithHttpInfoAsync(DamListAssetsByCodesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->ListAssetsByCodes_0");
            }


            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.ListAssetsByCodes_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DamListAssetsByCodesResponse>("/dam/list_assets_by_codes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAssetsByCodes_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Assets By Ids 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamListAssetsByIdsResponse</returns>
        public DamListAssetsByIdsResponse ListAssetsByIds(DamListAssetsByIdsRequest body, int operationIndex = 0)
        {
            dam.Client.ApiResponse<DamListAssetsByIdsResponse> localVarResponse = ListAssetsByIdsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Assets By Ids 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamListAssetsByIdsResponse</returns>
        public dam.Client.ApiResponse<DamListAssetsByIdsResponse> ListAssetsByIdsWithHttpInfo(DamListAssetsByIdsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->ListAssetsByIds");
            }

            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.ListAssetsByIds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DamListAssetsByIdsResponse>("/dam.Dam/ListAssetsByIds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAssetsByIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Assets By Ids 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamListAssetsByIdsResponse</returns>
        public async System.Threading.Tasks.Task<DamListAssetsByIdsResponse> ListAssetsByIdsAsync(DamListAssetsByIdsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            dam.Client.ApiResponse<DamListAssetsByIdsResponse> localVarResponse = await ListAssetsByIdsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Assets By Ids 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamListAssetsByIdsResponse)</returns>
        public async System.Threading.Tasks.Task<dam.Client.ApiResponse<DamListAssetsByIdsResponse>> ListAssetsByIdsWithHttpInfoAsync(DamListAssetsByIdsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->ListAssetsByIds");
            }


            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.ListAssetsByIds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DamListAssetsByIdsResponse>("/dam.Dam/ListAssetsByIds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAssetsByIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Assets By Ids 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamListAssetsByIdsResponse</returns>
        public DamListAssetsByIdsResponse ListAssetsByIds_0(DamListAssetsByIdsRequest body, int operationIndex = 0)
        {
            dam.Client.ApiResponse<DamListAssetsByIdsResponse> localVarResponse = ListAssetsByIds_0WithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Assets By Ids 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamListAssetsByIdsResponse</returns>
        public dam.Client.ApiResponse<DamListAssetsByIdsResponse> ListAssetsByIds_0WithHttpInfo(DamListAssetsByIdsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->ListAssetsByIds_0");
            }

            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.ListAssetsByIds_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DamListAssetsByIdsResponse>("/dam/list_assets_by_ids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAssetsByIds_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Assets By Ids 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamListAssetsByIdsResponse</returns>
        public async System.Threading.Tasks.Task<DamListAssetsByIdsResponse> ListAssetsByIds_0Async(DamListAssetsByIdsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            dam.Client.ApiResponse<DamListAssetsByIdsResponse> localVarResponse = await ListAssetsByIds_0WithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Assets By Ids 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamListAssetsByIdsResponse)</returns>
        public async System.Threading.Tasks.Task<dam.Client.ApiResponse<DamListAssetsByIdsResponse>> ListAssetsByIds_0WithHttpInfoAsync(DamListAssetsByIdsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->ListAssetsByIds_0");
            }


            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.ListAssetsByIds_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DamListAssetsByIdsResponse>("/dam/list_assets_by_ids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAssetsByIds_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Assets 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamListAssetsResponse</returns>
        public DamListAssetsResponse ListAssets_0(DamListAssetsRequest body, int operationIndex = 0)
        {
            dam.Client.ApiResponse<DamListAssetsResponse> localVarResponse = ListAssets_0WithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Assets 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamListAssetsResponse</returns>
        public dam.Client.ApiResponse<DamListAssetsResponse> ListAssets_0WithHttpInfo(DamListAssetsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->ListAssets_0");
            }

            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.ListAssets_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DamListAssetsResponse>("/dam/list_assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAssets_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Assets 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamListAssetsResponse</returns>
        public async System.Threading.Tasks.Task<DamListAssetsResponse> ListAssets_0Async(DamListAssetsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            dam.Client.ApiResponse<DamListAssetsResponse> localVarResponse = await ListAssets_0WithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Assets 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamListAssetsResponse)</returns>
        public async System.Threading.Tasks.Task<dam.Client.ApiResponse<DamListAssetsResponse>> ListAssets_0WithHttpInfoAsync(DamListAssetsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->ListAssets_0");
            }


            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.ListAssets_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DamListAssetsResponse>("/dam/list_assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAssets_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Asset 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamAsset</returns>
        public DamAsset UpdateAsset(DamUpdateAssetRequest body, int operationIndex = 0)
        {
            dam.Client.ApiResponse<DamAsset> localVarResponse = UpdateAssetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Asset 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamAsset</returns>
        public dam.Client.ApiResponse<DamAsset> UpdateAssetWithHttpInfo(DamUpdateAssetRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UpdateAsset");
            }

            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UpdateAsset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DamAsset>("/dam.Dam/UpdateAsset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Asset 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamAsset</returns>
        public async System.Threading.Tasks.Task<DamAsset> UpdateAssetAsync(DamUpdateAssetRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            dam.Client.ApiResponse<DamAsset> localVarResponse = await UpdateAssetWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Asset 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamAsset)</returns>
        public async System.Threading.Tasks.Task<dam.Client.ApiResponse<DamAsset>> UpdateAssetWithHttpInfoAsync(DamUpdateAssetRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UpdateAsset");
            }


            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UpdateAsset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DamAsset>("/dam.Dam/UpdateAsset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Asset 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DamAsset</returns>
        public DamAsset UpdateAsset_0(DamUpdateAssetRequest body, int operationIndex = 0)
        {
            dam.Client.ApiResponse<DamAsset> localVarResponse = UpdateAsset_0WithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Asset 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DamAsset</returns>
        public dam.Client.ApiResponse<DamAsset> UpdateAsset_0WithHttpInfo(DamUpdateAssetRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UpdateAsset_0");
            }

            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UpdateAsset_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DamAsset>("/dam/update_asset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAsset_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Asset 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DamAsset</returns>
        public async System.Threading.Tasks.Task<DamAsset> UpdateAsset_0Async(DamUpdateAssetRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            dam.Client.ApiResponse<DamAsset> localVarResponse = await UpdateAsset_0WithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Asset 
        /// </summary>
        /// <exception cref="dam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DamAsset)</returns>
        public async System.Threading.Tasks.Task<dam.Client.ApiResponse<DamAsset>> UpdateAsset_0WithHttpInfoAsync(DamUpdateAssetRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new dam.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UpdateAsset_0");
            }


            dam.Client.RequestOptions localVarRequestOptions = new dam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UpdateAsset_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DamAsset>("/dam/update_asset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAsset_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
